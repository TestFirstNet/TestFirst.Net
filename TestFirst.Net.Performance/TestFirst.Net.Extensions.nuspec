<?xml version="1.0"?>
<package>
  <metadata>
    <id>TestFirst.Net.Performance</id>
    <version>$version$</version>
    <title>TestFirst.Net.Performance</title>
    <authors>TestFirst.Net</authors>
    <owners>TestFirst.Net</owners>
    <licenseUrl>http://testfirstnet.github.io/TestFirst.Net/LICENSE.txt</licenseUrl>
    <projectUrl>https://github.com/TestFirstNet/TestFirst.Net/</projectUrl>
    <iconUrl>http://testfirstnet.github.io/TestFirst.Net/icon.png</iconUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <summary>Performance testing extensions to core TestFirst.Net</summary>
    <description>

    1.Overview

        Allows performance/load testing using TestFirst.Net
            
    2. Usage
       
        Example:


            [TestFixture]
            public class MyPerfTest:AbstractNUnitScenarioTest
            {
                [Test]        
                public void WhateverTest()
                {
                    PerformanceMetricsWriter metricsWriter;
                    PerformanceReport report;

                    Scenario()
                        .Given(metricsWriter = PerformanceMetricsWriter.With().TestName("WhateverTest"))
                        .When(PerformanceSuite.With()
                            .NumRuns(2)
                            .PerRunTimeout(20).Seconds()
                            .LoadRunner(ContentionLoadRunner.With()
                                .Tests(new MyPerfTest())
                                .RunTimeout(15).Seconds()                        )           
                            .Listener(metricsWriter)
                            .Build())
                        .When(report = metricsWriter.BuildReport())
                        .When(report.PrintToConsole)
                        .Then(
                            Expect(report.GetMetricSummaryNamed("metric1").ValueMean),
                            Is(ADouble.EqualTo(4.75)))
                        .Then(
                            Expect(report.GetMetricSummaryNamed("metric1").ValueMedian),
                            Is(ADouble.EqualTo(5)))
                         .Then(
                            Expect(report.GetMetricSummaryNamed("metric1").ValueMax),
                            Is(ADouble.EqualTo(10)))
                         .Then(
                            Expect(report.GetMetricSummaryNamed("metric1").ValueMin),
                            Is(ADouble.EqualTo(0)))
                         .Then(
                            Expect(report.GetMetricSummaryNamed("metric1").MetricName),
                            Is(AString.EqualTo("metric1")));
                }

            ...
            }   
    
    Any part of the above can be replaced with your own implementation if you don't like what the defaults provide.

    </description>
    <!--<releaseNotes></releaseNotes>-->
    <copyright>Copyright Â© TestFirst.Net 2014 - 2015</copyright>
    <tags>testing tdd bdd fluent performance</tags>
   <dependencies>
        <dependency id="NUnit" version="2.6.2"/>
        <dependency id="Moq" version="4.0.10827"/>
        <dependency id="TestFirst.Net" version="$version$"/>
    </dependencies>
  </metadata>
  <files>
    <file src="obj/Release/TestFirst.Net.Performance*.dll" target="/lib/net/40/"/>
  </files>
</package>
