#!/bin/bash

VERBOSITY=normal
#VERBOSITY=quiet,  minimal,  normal, detailed, diagnostic
CONFIG=Release
#CONFIG=Debug

VERSION=0.0.0
LOCAL_REPO=~/workspace/local-nuget-repo
TMP_DIR=obj/tmp
PROJECTS="TestFirst.Net TestFirst.Net.Extensions TestFirst.Net.Performance"
TEST_PROJECTS="TestFirst.Net.Tests TestFirst.Net.Extensions.Test TestFirst.Net.Performance.Test"
NUNIT_VERSION="2.6.4"
NUGET_SRC=http://www.nuget.org/api/v2/ 

# reliably get the solution dir
pushd `dirname $0` > /dev/null
SOLUTIONDIR=`pwd -P`
popd > /dev/null

cd $SOLUTIONDIR

function log(){
    echo "[BUILD] $1"
}

function error(){
    echo "[BUILD] [ERROR!] $1"
}


function filterHtml(){
    in="$1"
    cat $in | sed -e 's/</\&#8249;/g' -e 's/>/\&#8250;/g'
}

function filterTemplate(){
    from=$1
    to=$2 
    
    log "filtering template $from to $to"
    mkdir -p $TMP_DIR

    cp -f "$from" "$to"
    filterHtml "../README.md" > "$TMP_DIR/README.md.clean"
    filterHtml "../RELEASENOTES.txt" > "$TMP_DIR/RELEASENOTES.txt.clean"

    sed -i -e "/TOKEN_MAIN_DESCRIPTON/{r $TMP_DIR/README.md.clean" -e 'd}' $to
    sed -i -e "/TOKEN_MAIN_RELEASENOTES/{r $TMP_DIR/RELEASENOTES.txt.clean" -e 'd}' $to
    
    rm -f "$TMP_DIR/README.md.clean"
    rm -f "$TMP_DIR/RELEASENOTES.txt"
    
    rm -fR $TMP_DIR
}

function nupack(){
    projName="$1"

    log "packing $projName"

    requireVersion

    pushd "$projName" > /dev/null

        #main package
        log "building main nuget package"
        filterTemplate ${projName}.nuspec.template ${projName}.nuspec
        nuget pack ${projName}.nuspec  -Prop Configuration=$CONFIG -Version $VERSION    
        rm -f ${projName}.nuspec

        log "building symbols nuget package"
        #symbols package
        filterTemplate ${projName}.nuspec.template ${projName}.nuspec
        nuget pack ${projName}.nuspec  -Symbols -Prop Configuration=$CONFIG -Version $VERSION 
        #rm -f ${projName}.nuspec

        #todo: gitlink
    popd > /dev/null
}

function cleanLocalRepo(){
    rm -f $LOCAL_REPO/*.nupkg
}

function packAll(){ 
    log "packing all"
    for proj in $PROJECTS; do
        nupack $proj
    done
}

function nuPush(){
    proj=$1
    pkg="$proj.nupkg"
    log "pushing nuget pkg $pkg"
    pushd $proj > /dev/null
        nuget Push $pkg    
    popd > /dev/null
}


function removeOldNuPkgs(){
    find . -name \*.nupkg | xargs -i rm {}
}

function copyNuPkgsToLocalRepo(){
    log "copying packages to local test repo $LOCAL_REPO"
    mkdir -p $LOCAL_REPO
    find . -name \*.nupkg | xargs -i cp {} --target $LOCAL_REPO

    log "packages in local repo are:"
    ls -l $LOCAL_REPO
}

function requireVersion(){
   if [ "$VERSION" == "0.0.0" ]; then
        read -p "Build as nuget version: " VERSION
   fi
}

# ------------- build targets ---------------

function tagGit(){
    log "tagging git"
    requireVersion

    while true; do
        read -p "tag git with version v$VERSION? yn :" yn
        case $yn in
            [Yy]* ) 
			    git tag -a v$VERSION -m "Release version $VERSION"; 
			    log "tagged with v$VERSION"
			    break;;
            [Nn]* )
			    log "not tagging"
			    break;;
            * ) echo "Please answer y or n.";;
        esac
    done
}

function cleanAll(){
    log "clean all"

    for proj in $PROJECTS; do
        rm -fR "$proj/bin/*"
        rm -fR "$proj/obj/*"
    done
    for proj in $TEST_PROJECTS; do
        rm -fR "$proj/bin/*"
        rm -fR "$proj/obj/*"
    done

    removeOldNuPkgs
    xbuild TestFirst.Net.sln /t:Clean  /verbosity:quiet /nologo
    xbuild TestFirst.Net.sln /t:Clean  /p:Configuration=Release  /verbosity:quiet /nologo
    xbuild TestFirst.Net.sln /t:Clean  /p:Configuration=Debug  /verbosity:quiet /nologo
    xbuild TestFirst.Net.sln /t:Clean  /p:Configuration=$CONFIG  /verbosity:quiet /nologo
    # remove generated nuspec files
    find . -name *.nuspec | xargs -i rm {}
}

function buildAll(){
    log "building all"
    # TODO:detect mono and use xbuild (if in cygwin env)
    #msbuild.exe TestFirst.Net.sln -t:Clean,Build -p:Configuration=Release
    xbuild TestFirst.Net.sln /t:Build /p:Configuration=$CONFIG /verbosity:$VERBOSITY
}


function testAll(){
    log "Running tests"

    runner="$SOLUTIONDIR/packages/NUnit.Runners.$NUNIT_VERSION/tools/nunit-console.exe"
    if [ ! -f "$runner" ]; then
        log "downloading nunit console runner"    
        nuget install NUnit.Runners -Source "$NUGET_SRC" -OutputDir $SOLUTIONDIR/packages -Version $NUNIT_VERSION
    fi
    if [ ! -f "$runner" ]; then
        error "couldn't install nunit runner. Looking for $runner. Tried to install from $NUGET_SRC"      
        exit -1
    fi
    #e.g. ./TestFirst.Net.Performance.Test/obj/Release/TestFirst.Net.Performance.Test.dll
    for proj in $TEST_PROJECTS; do
        log "Executing tests in $proj"
        pushd $proj/bin/$CONFIG/ > /dev/null
            # to also handle the TestFirst.Net.Tests project (note the 's' after 'Test')
            dll_name=`echo $proj | sed 's/\(.*\)s$/\1/'`
            mono $runner -nologo $dll_name.dll
        popd > /dev/null
        log "finished running test $proj"
    done
}

function releaseBuild(){
    requireVersion

    removeOldNuPkgs
    cleanAll
    buildAll
    testAll
    packAll
    copyNuPkgsToLocalRepo
}


function releasePush(){
    for proj in $PROJECTS; do
        nuPush $proj
    done
}

function release(){
    log "This will build and package TestFirst.Net and then tag git"
    log "This will place a copy of the built packages into $LOCAL_REPO for testing"

    buildRelease
    tagGit
}

function printHelp() {
    log "USAGE:"
    log "   ./build target [target..] [varname1=value1..]"
    log "TARGETS:"
    log "  clean : remove all built artifacts (*.dll)"
    log "  clean-repo : remove all *.nupkg files from local repo $LOCAL_REPO"
    log "  clean-all : clean,clean-repo"
    log "  build : build the solution using msbuild/xbuild"
    log "  test : run the unit tests"
    log "  pack : pack the built artifacts into nuget packages"
    log "  release-build : clean, build, test, pack"
    log "  release-push : push all the nuget packages to the nuget repo"
    log "  release : release-build,git-tag"
    log "VARIABLES:"
    log "  config : the solution config to use. Debug|Release. Current $CONFIG"
    log "  version : version to release at. Format MAJOR.MINOR.BUILD. Current $VERSION"
    log "  verbosity : xbuild verbosity. quiet|minimal|normal|detailed|diagnostic. Current $VERBOSITY"
    log "  local_repo : path to local nuget test repo. Current $LOCAL_REPO"
    log "  nunit_version : Version of nunit to use for testing. Current $NUNIT_VERSION"
    log "  nuget_src : Nuget source to install nunit runner from. Current $NUGET_SRC"
    log "To set script variables, pass in <name>=<value>, as in './build release version=1.2.3' (name is case insensitive)"
}

log "-------- TestFirst.Net Build -----"
    
#extract variable assignment. Expect VAR=VAL on command line
for arg in "$@"; do  
    if [[ $arg == *"="* ]]; then
        name=`echo $arg | sed 's/\(.*\)=.*/\1/' | awk '{print toupper($0)}'`
        val=`echo $arg | sed 's/.*=\(.*\)/\1/'`
        log "set $name ==> $val"
        declare $name=$val
    fi    
done
 
has_target=0
for target in "$@"; do  

    #skip variable assignment
    if [[ $target == *"="* ]]; then
        continue
    fi    
  
    log "executing target '$target'"

    case $target in
        'clean' )
            cleanAll
            ;;
        'clean-repo' )
            cleanLocalRepo
            ;;
        'clean-all' )
            cleanLocalRepo
            cleanAll
            ;;
        'build' )
            buildAll
            ;;
        'test' )
            testAll
            ;;
        'pack' )
            packAll
            ;; 
        'release-push' )
            releasePush
            ;; 
        'release-build' )
            releaseBuild
            ;;
        'release' )
            release
            ;;
        'help' )
            printHelp
            ;;             
        * ) 
            echo "No build target '$target'. For help run target '$0 help'";
            exit -1
    esac
    has_target=1
done

if [ $has_target == 0 ]; then
    echo "no build target provided. For help run target '$0 help'"
fi
