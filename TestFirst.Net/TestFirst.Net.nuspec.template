<?xml version="1.0" encoding="utf-8"?>
<package>
  <metadata>
    <id>TestFirst.Net</id>
    <version>$version$</version>
    <title>TestFirst.Net</title>
    <authors>TestFirst.Net</authors>
    <owners>TestFirst.Net</owners>
    <licenseUrl>http://testfirstnet.github.io/TestFirst.Net/LICENSE.txt</licenseUrl>
    <projectUrl>https://github.com/TestFirstNet/TestFirst.Net/</projectUrl>
    <iconUrl>http://testfirstnet.github.io/TestFirst.Net/icon.png</iconUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>
Testing library providing a fluent tdd/bdd testing approach. Easily extended and integrated 
into your own testing tools (nunit, xunit, moq, etc). 

Encourages the creation of easier to read and maintain testing code via the use of fluent builders for scenario's, given/when/thens, 
Moq verification, List and Dictionary matchers

Available as via NuGet and compatible on both the Windows and Mono

As a quick example, the scenario:

    "Given a registered user, with an account balance of 10 dollars, when 6 dollars is debited, then 
    expect that the account only has 4 dollars, and the transaction ledger records a 6 dollar debit"

can be written in TestFirst.Net as:

    Scenario()
        .Given(user = UserInTheDb().WithDefaults())
        .Given(account = AccountInTheDb().For(user).Balance(10).Dollars())
        
        .When(()=>account.debit(6))

        .Then(
            ExpectThat(TheAccountInTheDb.For(account)),
            Is(AnAcccount.With().Balance(4).Dollars())
        .Then(
            ExpectThat(TheAccountLedgerInTheDb.For(account)),
            Is(AnLedger.With().Debit(6).Dollars());


for more info see project page

    </description>
    <releaseNotes>
        TOKEN_MAIN_RELEASENOTES
    </releaseNotes>
    <copyright>Copyright Â© TestFirst.Net 2014 - 2015</copyright>
    <tags>testing tdd bdd fluent nunit moq</tags>
  </metadata>
  <files>
    <file src="obj/Release/TestFirst.Net*.dll" target="/lib/net/40/"/>
  </files>
</package>
